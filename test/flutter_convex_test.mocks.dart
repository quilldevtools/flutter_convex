// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_convex/test/flutter_convex_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:convert' as _i6;
import 'dart:typed_data' as _i8;

import 'package:async/async.dart' as _i9;
import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:stream_channel/stream_channel.dart' as _i4;
import 'package:web_socket_channel/src/channel.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeResponse_0 extends _i1.SmartFake implements _i2.Response {
  _FakeResponse_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStreamedResponse_1 extends _i1.SmartFake
    implements _i2.StreamedResponse {
  _FakeStreamedResponse_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWebSocketSink_2 extends _i1.SmartFake implements _i3.WebSocketSink {
  _FakeWebSocketSink_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStreamChannel_3<T> extends _i1.SmartFake
    implements _i4.StreamChannel<T> {
  _FakeStreamChannel_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i2.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#head, [url], {#headers: headers}),
            returnValue: _i5.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(#head, [url], {#headers: headers}),
              ),
            ),
          )
          as _i5.Future<_i2.Response>);

  @override
  _i5.Future<_i2.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#get, [url], {#headers: headers}),
            returnValue: _i5.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(#get, [url], {#headers: headers}),
              ),
            ),
          )
          as _i5.Future<_i2.Response>);

  @override
  _i5.Future<_i2.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i6.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #post,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i5.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(
                  #post,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i5.Future<_i2.Response>);

  @override
  _i5.Future<_i2.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i6.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #put,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i5.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(
                  #put,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i5.Future<_i2.Response>);

  @override
  _i5.Future<_i2.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i6.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #patch,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i5.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(
                  #patch,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i5.Future<_i2.Response>);

  @override
  _i5.Future<_i2.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i6.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #delete,
              [url],
              {#headers: headers, #body: body, #encoding: encoding},
            ),
            returnValue: _i5.Future<_i2.Response>.value(
              _FakeResponse_0(
                this,
                Invocation.method(
                  #delete,
                  [url],
                  {#headers: headers, #body: body, #encoding: encoding},
                ),
              ),
            ),
          )
          as _i5.Future<_i2.Response>);

  @override
  _i5.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(
            Invocation.method(#read, [url], {#headers: headers}),
            returnValue: _i5.Future<String>.value(
              _i7.dummyValue<String>(
                this,
                Invocation.method(#read, [url], {#headers: headers}),
              ),
            ),
          )
          as _i5.Future<String>);

  @override
  _i5.Future<_i8.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readBytes, [url], {#headers: headers}),
            returnValue: _i5.Future<_i8.Uint8List>.value(_i8.Uint8List(0)),
          )
          as _i5.Future<_i8.Uint8List>);

  @override
  _i5.Future<_i2.StreamedResponse> send(_i2.BaseRequest? request) =>
      (super.noSuchMethod(
            Invocation.method(#send, [request]),
            returnValue: _i5.Future<_i2.StreamedResponse>.value(
              _FakeStreamedResponse_1(
                this,
                Invocation.method(#send, [request]),
              ),
            ),
          )
          as _i5.Future<_i2.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
    Invocation.method(#close, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [WebSocketChannel].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebSocketChannel extends _i1.Mock implements _i3.WebSocketChannel {
  MockWebSocketChannel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> get ready =>
      (super.noSuchMethod(
            Invocation.getter(#ready),
            returnValue: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Stream<dynamic> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i5.Stream<dynamic>.empty(),
          )
          as _i5.Stream<dynamic>);

  @override
  _i3.WebSocketSink get sink =>
      (super.noSuchMethod(
            Invocation.getter(#sink),
            returnValue: _FakeWebSocketSink_2(this, Invocation.getter(#sink)),
          )
          as _i3.WebSocketSink);

  @override
  void pipe(_i4.StreamChannel<dynamic>? other) => super.noSuchMethod(
    Invocation.method(#pipe, [other]),
    returnValueForMissingStub: null,
  );

  @override
  _i4.StreamChannel<S> transform<S>(
    _i4.StreamChannelTransformer<S, dynamic>? transformer,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#transform, [transformer]),
            returnValue: _FakeStreamChannel_3<S>(
              this,
              Invocation.method(#transform, [transformer]),
            ),
          )
          as _i4.StreamChannel<S>);

  @override
  _i4.StreamChannel<dynamic> transformStream(
    _i5.StreamTransformer<dynamic, dynamic>? transformer,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#transformStream, [transformer]),
            returnValue: _FakeStreamChannel_3<dynamic>(
              this,
              Invocation.method(#transformStream, [transformer]),
            ),
          )
          as _i4.StreamChannel<dynamic>);

  @override
  _i4.StreamChannel<dynamic> transformSink(
    _i9.StreamSinkTransformer<dynamic, dynamic>? transformer,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#transformSink, [transformer]),
            returnValue: _FakeStreamChannel_3<dynamic>(
              this,
              Invocation.method(#transformSink, [transformer]),
            ),
          )
          as _i4.StreamChannel<dynamic>);

  @override
  _i4.StreamChannel<dynamic> changeStream(
    _i5.Stream<dynamic> Function(_i5.Stream<dynamic>)? change,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#changeStream, [change]),
            returnValue: _FakeStreamChannel_3<dynamic>(
              this,
              Invocation.method(#changeStream, [change]),
            ),
          )
          as _i4.StreamChannel<dynamic>);

  @override
  _i4.StreamChannel<dynamic> changeSink(
    _i5.StreamSink<dynamic> Function(_i5.StreamSink<dynamic>)? change,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#changeSink, [change]),
            returnValue: _FakeStreamChannel_3<dynamic>(
              this,
              Invocation.method(#changeSink, [change]),
            ),
          )
          as _i4.StreamChannel<dynamic>);

  @override
  _i4.StreamChannel<S> cast<S>() =>
      (super.noSuchMethod(
            Invocation.method(#cast, []),
            returnValue: _FakeStreamChannel_3<S>(
              this,
              Invocation.method(#cast, []),
            ),
          )
          as _i4.StreamChannel<S>);
}
